/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CompanyWhereUniqueInput } from "../../company/base/CompanyWhereUniqueInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsInt,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumEmployeeEmployeePosition } from "./EnumEmployeeEmployeePosition";
import { EquipmentSaleUpdateManyWithoutEmployeesInput } from "./EquipmentSaleUpdateManyWithoutEmployeesInput";
import { InstallationUpdateManyWithoutEmployeesInput } from "./InstallationUpdateManyWithoutEmployeesInput";
import { MaintRepairUpdateManyWithoutEmployeesInput } from "./MaintRepairUpdateManyWithoutEmployeesInput";
import { TaskPlannerUpdateManyWithoutEmployeesInput } from "./TaskPlannerUpdateManyWithoutEmployeesInput";
@InputType()
class EmployeeUpdateInput {
  @ApiProperty({
    required: false,
    type: () => CompanyWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CompanyWhereUniqueInput)
  @IsOptional()
  @Field(() => CompanyWhereUniqueInput, {
    nullable: true,
  })
  companyId?: CompanyWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeAge?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeDepartment?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeEmail?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeName?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  employeePhone?: number;

  @ApiProperty({
    required: false,
    enum: EnumEmployeeEmployeePosition,
    isArray: true,
  })
  @IsEnum(EnumEmployeeEmployeePosition, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumEmployeeEmployeePosition], {
    nullable: true,
  })
  employeePosition?: Array<"Ceo" | "Engineer" | "Technician" | "Sales">;

  @ApiProperty({
    required: false,
    type: () => EquipmentSaleUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSaleUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EquipmentSaleUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  equipmentSales?: EquipmentSaleUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => InstallationUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => InstallationUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => InstallationUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  installations?: InstallationUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => MaintRepairUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => MaintRepairUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => MaintRepairUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  maintRepairs?: MaintRepairUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TaskPlannerUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TaskPlannerUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TaskPlannerUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  taskPlanners?: TaskPlannerUpdateManyWithoutEmployeesInput;
}
export { EmployeeUpdateInput };
