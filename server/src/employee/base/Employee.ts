/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Company } from "../../company/base/Company";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsInt,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumEmployeeEmployeePosition } from "./EnumEmployeeEmployeePosition";
import { EquipmentSale } from "../../equipmentSale/base/EquipmentSale";
import { Installation } from "../../installation/base/Installation";
import { MaintRepair } from "../../maintRepair/base/MaintRepair";
import { TaskPlanner } from "../../taskPlanner/base/TaskPlanner";
@ObjectType()
class Employee {
  @ApiProperty({
    required: false,
    type: () => Company,
  })
  @ValidateNested()
  @Type(() => Company)
  @IsOptional()
  companyId?: Company | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeAge!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  employeeDepartment!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  employeeEmail!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeName!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  employeePhone!: number;

  @ApiProperty({
    required: true,
    enum: EnumEmployeeEmployeePosition,
    isArray: true,
  })
  @IsEnum(EnumEmployeeEmployeePosition, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumEmployeeEmployeePosition], {
    nullable: true,
  })
  employeePosition?: Array<"Ceo" | "Engineer" | "Technician" | "Sales">;

  @ApiProperty({
    required: false,
    type: () => [EquipmentSale],
  })
  @ValidateNested()
  @Type(() => EquipmentSale)
  @IsOptional()
  equipmentSales?: Array<EquipmentSale>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Installation],
  })
  @ValidateNested()
  @Type(() => Installation)
  @IsOptional()
  installations?: Array<Installation>;

  @ApiProperty({
    required: false,
    type: () => [MaintRepair],
  })
  @ValidateNested()
  @Type(() => MaintRepair)
  @IsOptional()
  maintRepairs?: Array<MaintRepair>;

  @ApiProperty({
    required: false,
    type: () => [TaskPlanner],
  })
  @ValidateNested()
  @Type(() => TaskPlanner)
  @IsOptional()
  taskPlanners?: Array<TaskPlanner>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}
export { Employee };
