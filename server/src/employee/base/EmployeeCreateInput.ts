/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CompanyWhereUniqueInput } from "../../company/base/CompanyWhereUniqueInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsInt,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumEmployeeEmployeePosition } from "./EnumEmployeeEmployeePosition";
import { EquipmentSaleCreateNestedManyWithoutEmployeesInput } from "./EquipmentSaleCreateNestedManyWithoutEmployeesInput";
import { InstallationCreateNestedManyWithoutEmployeesInput } from "./InstallationCreateNestedManyWithoutEmployeesInput";
import { MaintRepairCreateNestedManyWithoutEmployeesInput } from "./MaintRepairCreateNestedManyWithoutEmployeesInput";
import { TaskPlannerCreateNestedManyWithoutEmployeesInput } from "./TaskPlannerCreateNestedManyWithoutEmployeesInput";
@InputType()
class EmployeeCreateInput {
  @ApiProperty({
    required: false,
    type: () => CompanyWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CompanyWhereUniqueInput)
  @IsOptional()
  @Field(() => CompanyWhereUniqueInput, {
    nullable: true,
  })
  companyId?: CompanyWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeAge?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  employeeDepartment!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  employeeEmail!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  employeeName?: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  employeePhone!: number;

  @ApiProperty({
    required: true,
    enum: EnumEmployeeEmployeePosition,
    isArray: true,
  })
  @IsEnum(EnumEmployeeEmployeePosition, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumEmployeeEmployeePosition], {
    nullable: true,
  })
  employeePosition?: Array<"Ceo" | "Engineer" | "Technician" | "Sales">;

  @ApiProperty({
    required: false,
    type: () => EquipmentSaleCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSaleCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => EquipmentSaleCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  equipmentSales?: EquipmentSaleCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => InstallationCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => InstallationCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => InstallationCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  installations?: InstallationCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => MaintRepairCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => MaintRepairCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => MaintRepairCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  maintRepairs?: MaintRepairCreateNestedManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TaskPlannerCreateNestedManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => TaskPlannerCreateNestedManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => TaskPlannerCreateNestedManyWithoutEmployeesInput, {
    nullable: true,
  })
  taskPlanners?: TaskPlannerCreateNestedManyWithoutEmployeesInput;
}
export { EmployeeCreateInput };
