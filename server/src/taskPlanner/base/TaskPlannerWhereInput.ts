/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested, IsEnum } from "class-validator";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { StringFilter } from "../../util/StringFilter";
import { EnumTaskPlannerPriorityLevel } from "./EnumTaskPlannerPriorityLevel";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { EnumTaskPlannerTaskStatus } from "./EnumTaskPlannerTaskStatus";
import { TicketWhereUniqueInput } from "../../ticket/base/TicketWhereUniqueInput";
import { IntFilter } from "../../util/IntFilter";
@InputType()
class TaskPlannerWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  employeeAssigned?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => EmployeeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeWhereUniqueInput, {
    nullable: true,
  })
  employeeid?: EmployeeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    enum: EnumTaskPlannerPriorityLevel,
  })
  @IsEnum(EnumTaskPlannerPriorityLevel)
  @IsOptional()
  @Field(() => EnumTaskPlannerPriorityLevel, {
    nullable: true,
  })
  priorityLevel?: "High" | "Middium" | "Low";

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  taskEndDate?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  taskStartDate?: DateTimeFilter;

  @ApiProperty({
    required: false,
    enum: EnumTaskPlannerTaskStatus,
  })
  @IsEnum(EnumTaskPlannerTaskStatus)
  @IsOptional()
  @Field(() => EnumTaskPlannerTaskStatus, {
    nullable: true,
  })
  taskStatus?: "Open" | "Done" | "Closed";

  @ApiProperty({
    required: false,
    type: () => TicketWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TicketWhereUniqueInput)
  @IsOptional()
  @Field(() => TicketWhereUniqueInput, {
    nullable: true,
  })
  ticketId?: TicketWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  ticketNumber?: IntFilter;
}
export { TaskPlannerWhereInput };
