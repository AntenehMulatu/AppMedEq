/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestMorgan from "nest-morgan";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EquidevService } from "../equidev.service";
import { EquidevCreateInput } from "./EquidevCreateInput";
import { EquidevWhereInput } from "./EquidevWhereInput";
import { EquidevWhereUniqueInput } from "./EquidevWhereUniqueInput";
import { EquidevFindManyArgs } from "./EquidevFindManyArgs";
import { EquidevUpdateInput } from "./EquidevUpdateInput";
import { Equidev } from "./Equidev";
import { SparePartFindManyArgs } from "../../sparePart/base/SparePartFindManyArgs";
import { SparePart } from "../../sparePart/base/SparePart";
import { SparePartWhereUniqueInput } from "../../sparePart/base/SparePartWhereUniqueInput";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { TicketWhereUniqueInput } from "../../ticket/base/TicketWhereUniqueInput";
@swagger.ApiBearerAuth()
export class EquidevControllerBase {
  constructor(
    protected readonly service: EquidevService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post()
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "create",
    possession: "any",
  })
  @swagger.ApiCreatedResponse({ type: Equidev })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: EquidevCreateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Equidev> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Equidev",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Equidev"} creation is forbidden for roles: ${roles}`
      );
    }
    return await this.service.create({
      data: {
        ...data,

        companyId: data.companyId
          ? {
              connect: data.companyId,
            }
          : undefined,

        equipmentSales: data.equipmentSales
          ? {
              connect: data.equipmentSales,
            }
          : undefined,

        installations: data.installations
          ? {
              connect: data.installations,
            }
          : undefined,

        maintRepairs: data.maintRepairs
          ? {
              connect: data.maintRepairs,
            }
          : undefined,
      },
      select: {
        companyId: {
          select: {
            id: true,
          },
        },

        countryOfOrign: true,
        createdAt: true,

        equipmentSales: {
          select: {
            id: true,
          },
        },

        hasSparePart: true,
        id: true,

        installations: {
          select: {
            id: true,
          },
        },

        maintRepairs: {
          select: {
            id: true,
          },
        },

        manufacturerName: true,
        model: true,
        serialNumber: true,
        shipmentArrivalDate: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get()
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "read",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: [Equidev] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(EquidevFindManyArgs)
  async findMany(
    @common.Req() request: Request,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Equidev[]> {
    const args = plainToClass(EquidevFindManyArgs, request.query);

    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Equidev",
    });
    const results = await this.service.findMany({
      ...args,
      select: {
        companyId: {
          select: {
            id: true,
          },
        },

        countryOfOrign: true,
        createdAt: true,

        equipmentSales: {
          select: {
            id: true,
          },
        },

        hasSparePart: true,
        id: true,

        installations: {
          select: {
            id: true,
          },
        },

        maintRepairs: {
          select: {
            id: true,
          },
        },

        manufacturerName: true,
        model: true,
        serialNumber: true,
        shipmentArrivalDate: true,
        updatedAt: true,
      },
    });
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "read",
    possession: "own",
  })
  @swagger.ApiOkResponse({ type: Equidev })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: EquidevWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Equidev | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Equidev",
    });
    const result = await this.service.findOne({
      where: params,
      select: {
        companyId: {
          select: {
            id: true,
          },
        },

        countryOfOrign: true,
        createdAt: true,

        equipmentSales: {
          select: {
            id: true,
          },
        },

        hasSparePart: true,
        id: true,

        installations: {
          select: {
            id: true,
          },
        },

        maintRepairs: {
          select: {
            id: true,
          },
        },

        manufacturerName: true,
        model: true,
        serialNumber: true,
        shipmentArrivalDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return permission.filter(result);
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "update",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Equidev })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: EquidevWhereUniqueInput,
    @common.Body()
    data: EquidevUpdateInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Equidev | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Equidev",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new errors.ForbiddenException(
        `providing the properties: ${properties} on ${"Equidev"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          companyId: data.companyId
            ? {
                connect: data.companyId,
              }
            : undefined,

          equipmentSales: data.equipmentSales
            ? {
                connect: data.equipmentSales,
              }
            : undefined,

          installations: data.installations
            ? {
                connect: data.installations,
              }
            : undefined,

          maintRepairs: data.maintRepairs
            ? {
                connect: data.maintRepairs,
              }
            : undefined,
        },
        select: {
          companyId: {
            select: {
              id: true,
            },
          },

          countryOfOrign: true,
          createdAt: true,

          equipmentSales: {
            select: {
              id: true,
            },
          },

          hasSparePart: true,
          id: true,

          installations: {
            select: {
              id: true,
            },
          },

          maintRepairs: {
            select: {
              id: true,
            },
          },

          manufacturerName: true,
          model: true,
          serialNumber: true,
          shipmentArrivalDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiOkResponse({ type: Equidev })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: EquidevWhereUniqueInput
  ): Promise<Equidev | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          companyId: {
            select: {
              id: true,
            },
          },

          countryOfOrign: true,
          createdAt: true,

          equipmentSales: {
            select: {
              id: true,
            },
          },

          hasSparePart: true,
          id: true,

          installations: {
            select: {
              id: true,
            },
          },

          maintRepairs: {
            select: {
              id: true,
            },
          },

          manufacturerName: true,
          model: true,
          serialNumber: true,
          shipmentArrivalDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/spareParts")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "read",
    possession: "any",
  })
  @ApiNestedQuery(SparePartFindManyArgs)
  async findManySpareParts(
    @common.Req() request: Request,
    @common.Param() params: EquidevWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<SparePart[]> {
    const query = plainToClass(SparePartFindManyArgs, request.query);
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "SparePart",
    });
    const results = await this.service.findSpareParts(params.id, {
      ...query,
      select: {
        companyId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        equipmentId: {
          select: {
            id: true,
          },
        },

        estimatedExpireDate: true,
        hasSerialNumber: true,
        id: true,
        nameOfSparePart: true,
        partNumber: true,
        serialNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/spareParts")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "update",
    possession: "any",
  })
  async createSpareParts(
    @common.Param() params: EquidevWhereUniqueInput,
    @common.Body() body: EquidevWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      spareParts: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Equidev",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Equidev"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/spareParts")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "update",
    possession: "any",
  })
  async updateSpareParts(
    @common.Param() params: EquidevWhereUniqueInput,
    @common.Body() body: SparePartWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      spareParts: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Equidev",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Equidev"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/spareParts")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "update",
    possession: "any",
  })
  async deleteSpareParts(
    @common.Param() params: EquidevWhereUniqueInput,
    @common.Body() body: EquidevWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      spareParts: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Equidev",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Equidev"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Get("/:id/tickets")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "read",
    possession: "any",
  })
  @ApiNestedQuery(TicketFindManyArgs)
  async findManyTickets(
    @common.Req() request: Request,
    @common.Param() params: EquidevWhereUniqueInput,
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<Ticket[]> {
    const query = plainToClass(TicketFindManyArgs, request.query);
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Ticket",
    });
    const results = await this.service.findTickets(params.id, {
      ...query,
      select: {
        companyId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        equipmentId: {
          select: {
            id: true,
          },
        },

        id: true,
        isPrimeCustomer: true,
        nameOfCustomer: true,
        nameOfEquipment: true,
        requisitionDate: true,
        requisitionDetails: true,
        requisitionType: true,

        taskPlanners: {
          select: {
            id: true,
          },
        },

        ticketStatus: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results.map((result) => permission.filter(result));
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Post("/:id/tickets")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "update",
    possession: "any",
  })
  async createTickets(
    @common.Param() params: EquidevWhereUniqueInput,
    @common.Body() body: EquidevWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      tickets: {
        connect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Equidev",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Equidev"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Patch("/:id/tickets")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "update",
    possession: "any",
  })
  async updateTickets(
    @common.Param() params: EquidevWhereUniqueInput,
    @common.Body() body: TicketWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      tickets: {
        set: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Equidev",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Equidev"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(nestMorgan.MorganInterceptor("combined"))
  @common.UseGuards(
    defaultAuthGuard.DefaultAuthGuard,
    nestAccessControl.ACGuard
  )
  @common.Delete("/:id/tickets")
  @nestAccessControl.UseRoles({
    resource: "Equidev",
    action: "update",
    possession: "any",
  })
  async deleteTickets(
    @common.Param() params: EquidevWhereUniqueInput,
    @common.Body() body: EquidevWhereUniqueInput[],
    @nestAccessControl.UserRoles() userRoles: string[]
  ): Promise<void> {
    const data = {
      tickets: {
        disconnect: body,
      },
    };
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Equidev",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(permission, data);
    if (invalidAttributes.length) {
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new common.ForbiddenException(
        `Updating the relationship: ${
          invalidAttributes[0]
        } of ${"Equidev"} is forbidden for roles: ${roles}`
      );
    }
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
