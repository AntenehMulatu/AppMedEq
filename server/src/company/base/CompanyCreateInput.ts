/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsNumber,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { EnumCompanyCompanyType } from "./EnumCompanyCompanyType";
import { EmployeeCreateNestedManyWithoutCompaniesInput } from "./EmployeeCreateNestedManyWithoutCompaniesInput";
import { Type } from "class-transformer";
import { EquidevCreateNestedManyWithoutCompaniesInput } from "./EquidevCreateNestedManyWithoutCompaniesInput";
import { EquipmentSaleCreateNestedManyWithoutCompaniesInput } from "./EquipmentSaleCreateNestedManyWithoutCompaniesInput";
import { InstallationCreateNestedManyWithoutCompaniesInput } from "./InstallationCreateNestedManyWithoutCompaniesInput";
import { MaintRepairCreateNestedManyWithoutCompaniesInput } from "./MaintRepairCreateNestedManyWithoutCompaniesInput";
import { SparePartCreateNestedManyWithoutCompaniesInput } from "./SparePartCreateNestedManyWithoutCompaniesInput";
import { TicketCreateNestedManyWithoutCompaniesInput } from "./TicketCreateNestedManyWithoutCompaniesInput";
@InputType()
class CompanyCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  companyAddress?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  companyDepartment!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  companyName!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  companyPhone!: number;

  @ApiProperty({
    required: false,
    enum: EnumCompanyCompanyType,
  })
  @IsEnum(EnumCompanyCompanyType)
  @IsOptional()
  @Field(() => EnumCompanyCompanyType, {
    nullable: true,
  })
  companyType?: "Customer" | "Supplier" | "Institution" | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeCreateNestedManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => EmployeeCreateNestedManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => EmployeeCreateNestedManyWithoutCompaniesInput, {
    nullable: true,
  })
  employees?: EmployeeCreateNestedManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: () => EquidevCreateNestedManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => EquidevCreateNestedManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => EquidevCreateNestedManyWithoutCompaniesInput, {
    nullable: true,
  })
  equipments?: EquidevCreateNestedManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: () => EquipmentSaleCreateNestedManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => EquipmentSaleCreateNestedManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => EquipmentSaleCreateNestedManyWithoutCompaniesInput, {
    nullable: true,
  })
  equipmentSales?: EquipmentSaleCreateNestedManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: () => InstallationCreateNestedManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => InstallationCreateNestedManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => InstallationCreateNestedManyWithoutCompaniesInput, {
    nullable: true,
  })
  installations?: InstallationCreateNestedManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: () => MaintRepairCreateNestedManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => MaintRepairCreateNestedManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => MaintRepairCreateNestedManyWithoutCompaniesInput, {
    nullable: true,
  })
  maintRepairs?: MaintRepairCreateNestedManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: () => SparePartCreateNestedManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => SparePartCreateNestedManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => SparePartCreateNestedManyWithoutCompaniesInput, {
    nullable: true,
  })
  spareParts?: SparePartCreateNestedManyWithoutCompaniesInput;

  @ApiProperty({
    required: false,
    type: () => TicketCreateNestedManyWithoutCompaniesInput,
  })
  @ValidateNested()
  @Type(() => TicketCreateNestedManyWithoutCompaniesInput)
  @IsOptional()
  @Field(() => TicketCreateNestedManyWithoutCompaniesInput, {
    nullable: true,
  })
  tickets?: TicketCreateNestedManyWithoutCompaniesInput;
}
export { CompanyCreateInput };
